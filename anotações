git init (git init --bare #cujo parâmetro indica que este repositório é puro, que contém apenas as alterações dos arquivos, e não uma cópia física de cada um dos arquivos, não terá working tree)
git status
git log (existem variações, por exemplo: --oneline, -p, --pretty="parametros")
git add "nome arquivo" ou . (todos arquivos)
git commit -m "mensagem do que foi feito"
git config --local/global user.name/.email "nome/email"
Devemos gerar um commit sempre que a nossa base de código está em um estado do qual gostaríamos de nos lembrar. Nunca devemos ter commits de códigos que não funcionam, mas também não é interessante deixar para commitar apenas no final de uma feature.
git remote add "nome" "endereço do servidor"
git remote (verifica o servidor, se existe)
git remote -v (verifica se o endereço está correto)
git clone "endereco" "nome do projeto"
git push (exemplo: git push "repositorio" master)
git pull
git remote rename "Nome que está" "Novo nome" (para manter a paridade de nomenclatura)
git branch (verifica em que branch está)
git branch "nome da nova branch" (Cria nova branch)
git checkout "nome da branch" (sai da branch atual e vai para "nome da branch")
git checkout -b lista (cria e altera da branch atual para a nova)
É interessante separar o desenvolvimento de funcionalidades em branches diferentes, para que as mudanças no código para uma não influencie no funcionamento de outra
git merge "branch" (comando para unificar duas linhas de trabalho)
git rebase "branch" (atualiza a branch mas mantem a master como o último trabalho sendo feito, para que não gere confusão do merge)
O merge junta os trabalhos e gera um merge commit. O rebase aplica os commits de outra branch na branch atual.
git log --graph (mostra o log e as linhas de desenvolvimento)
Para dar um "Ctrl z" no git:
    1- Antes do "git add": git checkout -- "nome arquivo"
    2- Antes do "git commit": git restore --staged "nome arquivo"
    3- Depois do commit: pegar o hash gerado pelo commit e: git revert "hash"
git stash (Salvar as alterações em um local temporário, sem necessidade de um commit)
git stash list (mostra a lista do q está na stash)
git stash apply
git stash drop
git stash pop (junção do apply e do drop, pega a última alteração adicionada à stash, e já remove ela de lá)
git checkout hash ("Viaja no tempo", Serve para pegar um estado em que o código se encontrava em commits atrás)



